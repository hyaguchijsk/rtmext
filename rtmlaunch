#!/usr/bin/env python

import sys,os,subprocess,signal,time,socket
import rtmext

from rtcshell import rtls,rtcon,rtact,rtdeact,rtconf,rtfind

if __name__ == '__main__':
    args=sys.argv

    xmlfile=""

    if len(args)==3:
        path=rtmext.rtmpack(["find",args[1]])
        if path == "":
            print >>sys.stderr, "rtmlaunch : package not found: " + args[1]
            #exit(1)
        xmlfile=path+"/"+args[2]
    elif len(args)==2:
        xmlfile=args[1]
    else:
        print >>sys.stderr, "usage: rtmlaunch [package] [launcher_xml]"
        print >>sys.stderr, "   or: rtmlaunch [launcher_xml]"
        sys.exit(1)

    rtml=rtmext.read_launch_xml(xmlfile)

    if rtml:
        #rtml.debug_print()

        # run
        processes=[]
        for comp in rtml.components:
            proc=rtmext.rtmrun(comp.package,comp.comp)
            processes.append(proc)

        # wait a few second for initialize comps
        check_count=50
        check_int=0.1
        check_comp=True
        for i in range(check_count):
            check_comp=True
            for comp in rtml.components:
                cxtname="/" + rtml.nameserver + "/" + comp.context_name()
                hascomp=rtmext.alive_component(cxtname,[rtml.nameserver])
                check_comp = check_comp and hascomp
            if check_comp:
                break
            else:
                time.sleep(check_int)

        if not check_comp:
            print >>sys.stderr, "component registration failed."
            for proc in processes:
                proc.send_signal(signal.SIGINT)
            for proc in processes:
                proc.wait()
            sys.exit(1)

        # connect
        for conn in rtml.connectors:
            # dataport connection
            if conn.outport:
                oport=conn.outport
                oportname=""
                for comp in rtml.components:
                    if oport.context==comp.context:
                        oportname="/" + rtml.nameserver + "/" + comp.context_name() + ":" + oport.portname
                        break
                for iport in conn.inports:
                    iportname=""
                    for comp in rtml.components:
                        if iport.context==comp.context:
                            iportname="/" + rtml.nameserver + "/" + comp.context_name() + ":" + iport.portname
                            break
                rtcon.main([oportname, iportname], None)

            # serviceport connection
            elif len(conn.services)==2:
                sportnames=[]
                for sport in conn.services:
                    sportname=""
                    for comp in rtml.components:
                        if sport.context==comp.context:
                            sportname="/" + rtml.nameserver + "/" + comp.context_name() + ":" + sport.portname
                            sportnames.append(sportname)
                            break
                rtcon.main(sportnames, None)

        # set configuration variables
        for conf in rtml.configurations:            
            cmp=rtfind.main(['/'+rtml.nameserver, '--name='+conf[0]+'.rtc', '--type=c'], None, 'list')
            if cmp != None: 
                cmp = cmp[0].encode('utf-8')
            else:
                continue
            vname = conf[1].encode('utf-8')
            vval = conf[2].encode('utf-8')
            rtconf.main([cmp, "set", vname, vval], None)

        # activate
        for comp in rtml.components:
            compname="/" + rtml.nameserver + "/" + comp.context_name()
            rtact.main([compname], None)

        # run til C-c
        try:
            while 1:
                pass
        except KeyboardInterrupt:
            # for comp in rtml.components:
            #     compname="/" + rtml.nameserver + "/" + comp.context_name()
            #     rtdeact.main([compname], None)
            # time.sleep(1.0)
            for proc in processes:
                proc.send_signal(signal.SIGINT)
            for proc in processes:
                proc.wait()

        print "process terminated."
        sys.exit(0)

    else:
        if len(args)==3:
            print >>sys.stderr, "rtmlaunch: no such file or package: " + args[1] + " , " + args[2]
        elif len(args)==2:
            print >>sys.stderr, "rtmlaunch: no such file: " + args[1]
        sys.exit(1)
